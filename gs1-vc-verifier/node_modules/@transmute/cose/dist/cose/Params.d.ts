export type HeaderMapEntry = [number, any];
export type HeaderMap = Map<number, any>;
export declare const ProtectedHeader: (entries: HeaderMapEntry[]) => Map<number, any>;
export declare const UnprotectedHeader: (entries: HeaderMapEntry[]) => Map<number, any>;
export declare const HeaderParameters: {
    Alg: number;
    Epk: number;
    Kid: number;
    X5t: number;
};
export declare const PartyUIdentity = -21;
export declare const PartyUNonce = -22;
export declare const PartyUOther = -23;
export declare const PartyVIdentity = -24;
export declare const PartyVNonce = -25;
export declare const PartyVOther = -26;
export declare const ContentType = 3;
export declare const PayloadLocation = -6801;
export declare const PayloadPreImageContentType = -6802;
export declare const PayloadHashAlgorithm = -6800;
export declare const CWTClaims = 15;
export declare const Type = 16;
export declare const Receipts = 394;
export declare const VerifiableDataStructure = 395;
export declare const VerifiableDataProofs = 396;
export declare const VerifiableDataStructures: {
    'RFC9162-Binary-Merkle-Tree': number;
};
export declare const VerifiableDataProofTypes: {
    'RFC9162-Inclusion-Proof': number;
    'RFC9162-Consistency-Proof': number;
};
export declare const Protected: {
    PartyUIdentity: number;
    PartyUNonce: number;
    PartyUOther: number;
    PartyVIdentity: number;
    PartyVNonce: number;
    PartyVOther: number;
    ContentType: number;
    Type: number;
    CWTClaims: number;
    PayloadHashAlgorithm: number;
    PayloadPreImageContentType: number;
    PayloadLocation: number;
    VerifiableDataStructure: number;
    Alg: number;
    Epk: number;
    Kid: number;
    X5t: number;
};
export declare const Unprotected: {
    Iv: number;
    Ek: number;
    Receipts: number;
    VerifiableDataProofs: number;
    Alg: number;
    Epk: number;
    Kid: number;
    X5t: number;
};
export declare const A128GCM = 1;
export declare const Aead: {
    A128GCM: number;
};
export declare const Hash: {
    SHA256: number;
};
export declare const Signature: {
    ES256: number;
    ES384: number;
};
export declare const KeyAgreement: {
    'ECDH-ES+HKDF-256': number;
};
export declare const KeyAgreementWithKeyWrap: {
    'ECDH-ES+A128KW': number;
};
export declare const KeyWrap: {
    A128KW: number;
};
export declare const Direct: {
    'HPKE-Base-P256-SHA256-AES128GCM': number;
};
export declare const KeyType = 1;
export declare const KeyAlg = 3;
export declare const KeyId = 2;
export declare const Key: {
    Kty: number;
    Alg: number;
    Kid: number;
};
export declare const Epk: {
    Kty: number;
    Alg: number;
    Kid: number;
};
export declare const KeyTypes: {
    EC2: number;
};
export declare const EC2: {
    Crv: number;
    X: number;
    Y: number;
    D: number;
    Kty: number;
    Alg: number;
    Kid: number;
};
export declare const Curves: {
    P256: number;
};
export declare const COSE_Encrypt0 = 16;
export declare const COSE_Sign1 = 18;
export declare const COSE_Encrypt = 96;
