"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.issue = void 0;
const rfc9162_1 = require("@transmute/rfc9162");
const __1 = require("../../..");
const issue = (req) => __awaiter(void 0, void 0, void 0, function* () {
    const { protectedHeader, entry, entries, signer } = req;
    const vds = protectedHeader.get(__1.Protected.VerifiableDataStructure);
    if (vds !== __1.VerifiableDataStructures['RFC9162-Binary-Merkle-Tree']) {
        throw new Error('Unsupported verifiable data structure. See https://datatracker.ietf.org/doc/draft-ietf-cose-merkle-tree-proofs');
    }
    const root = yield rfc9162_1.CoMETRE.RFC9162_SHA256.root(entries);
    const proof = yield rfc9162_1.CoMETRE.RFC9162_SHA256.inclusion_proof(entry, entries);
    const proofs = new Map();
    proofs.set(__1.VerifiableDataProofTypes['RFC9162-Inclusion-Proof'], [
        __1.cbor.encode([
            proof.tree_size,
            proof.leaf_index,
            proof.inclusion_path.map(__1.cbor.toArrayBuffer),
        ])
    ]);
    const unprotectedHeader = new Map();
    unprotectedHeader.set(__1.Unprotected.VerifiableDataProofs, proofs);
    return signer.sign({
        protectedHeader,
        unprotectedHeader,
        payload: root
    });
});
exports.issue = issue;
