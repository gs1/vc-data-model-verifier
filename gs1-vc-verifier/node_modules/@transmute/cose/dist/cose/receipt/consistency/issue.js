"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.issue = void 0;
const rfc9162_1 = require("@transmute/rfc9162");
const __1 = require("../../..");
const cbor_1 = require("../../../cbor");
const issue = (req) => __awaiter(void 0, void 0, void 0, function* () {
    const { protectedHeader, receipt, entries, signer } = req;
    const consistencyVds = protectedHeader.get(__1.Protected.VerifiableDataStructure);
    if (consistencyVds !== __1.VerifiableDataStructures['RFC9162-Binary-Merkle-Tree']) {
        throw new Error('Unsupported verifiable data structure. See https://datatracker.ietf.org/doc/draft-ietf-cose-merkle-tree-proofs');
    }
    const { tag, value } = __1.cbor.decode(receipt);
    if (tag !== 18) {
        throw new Error('Receipt is not tagged cose sign1');
    }
    const [protectedHeaderBytes, unprotectedHeaderMap, payload] = value;
    const receiptProtectedHeader = __1.cbor.decode(protectedHeaderBytes);
    const inclusionVds = receiptProtectedHeader.get(__1.Protected.VerifiableDataStructure);
    if (inclusionVds !== __1.VerifiableDataStructures['RFC9162-Binary-Merkle-Tree']) {
        throw new Error('Unsupported verifiable data structure. See https://datatracker.ietf.org/doc/draft-ietf-cose-merkle-tree-proofs');
    }
    const [inclusion] = unprotectedHeaderMap.get(__1.Unprotected.VerifiableDataProofs)
        .get(__1.VerifiableDataProofTypes['RFC9162-Inclusion-Proof']); // get first inclusion proof
    if (payload !== null) {
        throw new Error('payload must be null for this type of proof');
    }
    const [tree_size, leaf_index, inclusion_path] = __1.cbor.decode(inclusion);
    const consistency_proof = yield rfc9162_1.CoMETRE.RFC9162_SHA256.consistency_proof({
        log_id: '',
        tree_size,
        leaf_index,
        inclusion_path,
    }, entries);
    const root = yield rfc9162_1.CoMETRE.RFC9162_SHA256.root(entries);
    const proofs = new Map();
    proofs.set(__1.VerifiableDataProofTypes['RFC9162-Consistency-Proof'], [
        __1.cbor.encode([
            consistency_proof.tree_size_1,
            consistency_proof.tree_size_2,
            consistency_proof.consistency_path.map(cbor_1.toArrayBuffer),
        ]),
    ]);
    const unprotectedHeader = new Map();
    unprotectedHeader.set(__1.Unprotected.VerifiableDataProofs, proofs);
    const consistency = yield signer.sign({
        protectedHeader,
        unprotectedHeader,
        payload: root
    });
    return { root, receipt: consistency, };
});
exports.issue = issue;
