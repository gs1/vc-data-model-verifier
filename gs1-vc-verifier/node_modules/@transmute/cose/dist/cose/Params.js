"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", { value: true });
exports.COSE_Encrypt = exports.COSE_Sign1 = exports.COSE_Encrypt0 = exports.Curves = exports.EC2 = exports.KeyTypes = exports.Epk = exports.Key = exports.KeyId = exports.KeyAlg = exports.KeyType = exports.Direct = exports.KeyWrap = exports.KeyAgreementWithKeyWrap = exports.KeyAgreement = exports.Signature = exports.Hash = exports.Aead = exports.A128GCM = exports.Unprotected = exports.Protected = exports.VerifiableDataProofTypes = exports.VerifiableDataStructures = exports.VerifiableDataProofs = exports.VerifiableDataStructure = exports.Receipts = exports.Type = exports.CWTClaims = exports.PayloadHashAlgorithm = exports.PayloadPreImageContentType = exports.PayloadLocation = exports.ContentType = exports.PartyVOther = exports.PartyVNonce = exports.PartyVIdentity = exports.PartyUOther = exports.PartyUNonce = exports.PartyUIdentity = exports.HeaderParameters = exports.UnprotectedHeader = exports.ProtectedHeader = void 0;
const ProtectedHeader = (entries) => {
    return new Map(entries);
};
exports.ProtectedHeader = ProtectedHeader;
const UnprotectedHeader = (entries) => {
    return new Map(entries);
};
exports.UnprotectedHeader = UnprotectedHeader;
exports.HeaderParameters = {
    Alg: 1,
    Epk: -1,
    Kid: 4,
    X5t: 34
};
exports.PartyUIdentity = -21;
exports.PartyUNonce = -22;
exports.PartyUOther = -23;
exports.PartyVIdentity = -24;
exports.PartyVNonce = -25;
exports.PartyVOther = -26;
exports.ContentType = 3;
exports.PayloadLocation = -6801;
exports.PayloadPreImageContentType = -6802;
exports.PayloadHashAlgorithm = -6800;
exports.CWTClaims = 15;
exports.Type = 16;
// https://datatracker.ietf.org/doc/draft-ietf-cose-merkle-tree-proofs/
exports.Receipts = 394;
exports.VerifiableDataStructure = 395;
exports.VerifiableDataProofs = 396;
exports.VerifiableDataStructures = {
    'RFC9162-Binary-Merkle-Tree': 1
};
// only for RFC9162-Binary-Merkle-Tree
exports.VerifiableDataProofTypes = {
    'RFC9162-Inclusion-Proof': -1,
    'RFC9162-Consistency-Proof': -2
};
exports.Protected = Object.assign(Object.assign({}, exports.HeaderParameters), { PartyUIdentity: exports.PartyUIdentity,
    PartyUNonce: exports.PartyUNonce,
    PartyUOther: exports.PartyUOther,
    PartyVIdentity: exports.PartyVIdentity,
    PartyVNonce: exports.PartyVNonce,
    PartyVOther: exports.PartyVOther,
    ContentType: exports.ContentType,
    Type: exports.Type,
    CWTClaims: // https://datatracker.ietf.org/doc/html/rfc9596
    exports.CWTClaims,
    PayloadHashAlgorithm: // https://datatracker.ietf.org/doc/html/rfc9597
    exports.PayloadHashAlgorithm,
    PayloadPreImageContentType: // new COSE Hash Envelop
    exports.PayloadPreImageContentType,
    PayloadLocation: exports.PayloadLocation,
    VerifiableDataStructure: exports.VerifiableDataStructure });
exports.Unprotected = Object.assign(Object.assign({}, exports.HeaderParameters), { Iv: 5, Ek: -4, // new from COSE HPKE
    Receipts: // new from COSE HPKE
    exports.Receipts,
    VerifiableDataProofs: exports.VerifiableDataProofs });
exports.A128GCM = 1;
exports.Aead = {
    A128GCM: exports.A128GCM
};
exports.Hash = {
    'SHA256': -16
};
exports.Signature = {
    'ES256': -7,
    'ES384': -35
};
exports.KeyAgreement = {
    'ECDH-ES+HKDF-256': -25
};
exports.KeyAgreementWithKeyWrap = {
    'ECDH-ES+A128KW': -29
};
exports.KeyWrap = {
    A128KW: -3
};
exports.Direct = {
    'HPKE-Base-P256-SHA256-AES128GCM': 35
};
exports.KeyType = 1;
exports.KeyAlg = 3;
exports.KeyId = 2;
exports.Key = {
    Kty: exports.KeyType,
    Alg: exports.KeyAlg,
    Kid: exports.KeyId
};
exports.Epk = Object.assign({}, exports.Key);
exports.KeyTypes = {
    EC2: 2
};
exports.EC2 = Object.assign(Object.assign({}, exports.Key), { Crv: -1, X: -2, Y: -3, D: -4 });
exports.Curves = {
    P256: 1,
};
exports.COSE_Encrypt0 = 16;
exports.COSE_Sign1 = 18;
exports.COSE_Encrypt = 96;
