"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hash = void 0;
const signer_1 = __importDefault(require("./signer"));
const subtleCryptoProvider_1 = __importDefault(require("../../crypto/subtleCryptoProvider"));
// https://datatracker.ietf.org/doc/draft-steele-cose-hash-envelope/
const Params_1 = require("../Params");
exports.hash = {
    signer: ({ remote }) => {
        return {
            sign: ({ protectedHeader, unprotectedHeader, payload }) => __awaiter(void 0, void 0, void 0, function* () {
                const subtle = yield (0, subtleCryptoProvider_1.default)();
                const hashEnvelopeAlgorithm = protectedHeader.get(Params_1.Protected.PayloadHashAlgorithm);
                if (hashEnvelopeAlgorithm !== Params_1.Hash.SHA256) {
                    throw new Error('Unsupported hash envelope algorithm (-16 is only one supported)');
                }
                const payloadHash = yield subtle.digest("SHA-256", payload);
                const normalSigner = (0, signer_1.default)({ remote });
                return new Uint8Array(yield normalSigner.sign({ protectedHeader, unprotectedHeader, payload: payloadHash }));
            })
        };
    }
};
