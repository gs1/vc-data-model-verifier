"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const cbor_1 = require("../../cbor");
const signer = ({ remote }) => {
    return {
        sign: ({ protectedHeader, unprotectedHeader, externalAAD, payload }) => __awaiter(void 0, void 0, void 0, function* () {
            // assume the caller does not realize that cbor will preserve the the View Type, and remove it.
            const payloadBuffer = (0, cbor_1.toArrayBuffer)(payload);
            const protectedHeaderBytes = (protectedHeader.size === 0) ? cbor_1.EMPTY_BUFFER : (0, cbor_1.encode)(protectedHeader);
            const decodedToBeSigned = [
                'Signature1',
                protectedHeaderBytes,
                externalAAD || cbor_1.EMPTY_BUFFER,
                payloadBuffer
            ];
            const encodedToBeSigned = (0, cbor_1.encode)(decodedToBeSigned);
            const signature = yield remote.sign(encodedToBeSigned);
            const coseSign1Structure = [protectedHeaderBytes, unprotectedHeader, payloadBuffer, signature];
            return (0, cbor_1.toArrayBuffer)(yield (0, cbor_1.encodeAsync)(new cbor_1.Tagged(cbor_1.Sign1Tag, coseSign1Structure), { canonical: true }));
        })
    };
};
exports.default = signer;
