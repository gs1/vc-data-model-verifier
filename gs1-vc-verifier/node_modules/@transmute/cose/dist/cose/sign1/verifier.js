"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cbor_1 = require("../../cbor");
const verifier_1 = __importDefault(require("../../crypto/verifier"));
const iana_1 = require("../../iana");
const Params_1 = require("../Params");
const verifier = ({ resolver }) => {
    return {
        verify: ({ coseSign1, externalAAD }) => __awaiter(void 0, void 0, void 0, function* () {
            var _a;
            const publicKeyJwk = yield resolver.resolve(coseSign1);
            const algInPublicKey = parseInt(`${(_a = iana_1.iana['COSE Algorithms'].getByName(`${publicKeyJwk.alg}`)) === null || _a === void 0 ? void 0 : _a.Value}`, 10);
            const ecdsa = (0, verifier_1.default)({ publicKeyJwk });
            const obj = yield (0, cbor_1.decodeFirst)(coseSign1);
            const signatureStructure = obj.value;
            if (!Array.isArray(signatureStructure)) {
                throw new Error('Expecting Array');
            }
            if (signatureStructure.length !== 4) {
                throw new Error('Expecting Array of length 4');
            }
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const [protectedHeaderBytes, _, payload, signature] = signatureStructure;
            const protectedHeaderMap = (!protectedHeaderBytes.length) ? new Map() : (0, cbor_1.decodeFirstSync)(protectedHeaderBytes);
            const algInHeader = protectedHeaderMap.get(Params_1.Protected.Alg);
            if (algInHeader !== algInPublicKey) {
                throw new Error('Verification key does not support algorithm: ' + algInHeader);
            }
            if (!signature) {
                throw new Error('No signature to verify');
            }
            const decodedToBeSigned = [
                'Signature1',
                protectedHeaderBytes,
                externalAAD || cbor_1.EMPTY_BUFFER,
                payload
            ];
            const encodedToBeSigned = (0, cbor_1.encode)(decodedToBeSigned);
            yield ecdsa.verify(encodedToBeSigned, signature);
            return payload;
        })
    };
};
exports.default = verifier;
