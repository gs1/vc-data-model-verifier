"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = void 0;
const jose_1 = require("jose");
const algorithms_1 = require("../algorithms");
const convertJsonWebKeyToCoseKey_1 = require("./convertJsonWebKeyToCoseKey");
const thumbprint_1 = require("./thumbprint");
const formatJwk_1 = require("./formatJwk");
const iana_1 = require("../../iana");
const Params_1 = require("../Params");
const generate = (alg, contentType = 'application/jwk+json') => __awaiter(void 0, void 0, void 0, function* () {
    let knownAlgorithm = Object.values(algorithms_1.IANACOSEAlgorithms).find((entry) => {
        return entry.Name === alg;
    });
    if (!knownAlgorithm) {
        knownAlgorithm = iana_1.iana["COSE Algorithms"].getByName(alg);
    }
    if (!knownAlgorithm) {
        throw new Error('Algorithm is not supported.');
    }
    const cryptoKeyPair = yield (0, jose_1.generateKeyPair)(iana_1.iana["COSE Algorithms"]["less-specified"](knownAlgorithm.Name), { extractable: true });
    const privateKeyJwk = yield (0, jose_1.exportJWK)(cryptoKeyPair.privateKey);
    const jwkThumbprint = yield (0, jose_1.calculateJwkThumbprint)(privateKeyJwk);
    privateKeyJwk.kid = jwkThumbprint;
    privateKeyJwk.alg = alg;
    if (contentType === 'application/jwk+json') {
        return (0, formatJwk_1.formatJwk)(privateKeyJwk);
    }
    if (contentType === 'application/cose-key') {
        delete privateKeyJwk.kid;
        const secretKeyCoseKey = yield (0, convertJsonWebKeyToCoseKey_1.convertJsonWebKeyToCoseKey)(privateKeyJwk);
        const coseKeyThumbprint = yield thumbprint_1.thumbprint.calculateCoseKeyThumbprint(secretKeyCoseKey);
        secretKeyCoseKey.set(Params_1.Key.Kid, coseKeyThumbprint);
        return secretKeyCoseKey;
    }
    throw new Error('Unsupported content type.');
});
exports.generate = generate;
