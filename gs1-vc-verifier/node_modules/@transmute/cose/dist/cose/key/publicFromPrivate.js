"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.publicFromPrivate = exports.extractPublicCoseKey = exports.extractPublicKeyJwk = void 0;
const Params_1 = require("../Params");
const extractPublicKeyJwk = (privateKeyJwk) => {
    if (privateKeyJwk.kty !== 'EC') {
        throw new Error('Only EC keys are supported');
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { d, p, q, dp, dq, qi, key_ops } = privateKeyJwk, publicKeyJwk = __rest(privateKeyJwk, ["d", "p", "q", "dp", "dq", "qi", "key_ops"]);
    return publicKeyJwk;
};
exports.extractPublicKeyJwk = extractPublicKeyJwk;
const extractPublicCoseKey = (secretKey) => {
    const publicCoseKeyMap = new Map(secretKey);
    if (publicCoseKeyMap.get(Params_1.Key.Kty) !== Params_1.KeyTypes.EC2) {
        throw new Error('Only EC2 keys are supported');
    }
    if (!publicCoseKeyMap.get(Params_1.EC2.D)) {
        throw new Error('privateKey is not a secret / private key (has no d / -4)');
    }
    publicCoseKeyMap.delete(Params_1.EC2.D);
    return publicCoseKeyMap;
};
exports.extractPublicCoseKey = extractPublicCoseKey;
const publicFromPrivate = (secretKey) => {
    if (secretKey.kty) {
        return (0, exports.extractPublicKeyJwk)(secretKey);
    }
    return (0, exports.extractPublicCoseKey)(secretKey);
};
exports.publicFromPrivate = publicFromPrivate;
