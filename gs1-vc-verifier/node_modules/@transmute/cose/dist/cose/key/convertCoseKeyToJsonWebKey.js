"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertCoseKeyToJsonWebKey = void 0;
const jose_1 = require("jose");
const elliptic_curves_1 = require("../elliptic-curves");
const curves = Object.values(elliptic_curves_1.IANACOSEEllipticCurves);
const formatJwk_1 = require("./formatJwk");
const iana_1 = require("../../iana");
const Params_1 = require("../Params");
const convertCoseKeyToJsonWebKey = (coseKey) => __awaiter(void 0, void 0, void 0, function* () {
    const kty = coseKey.get(Params_1.Key.Kty);
    // kty EC2
    if (![Params_1.KeyTypes.EC2].includes(kty)) {
        throw new Error('This library requires does not support the given key type');
    }
    const kid = coseKey.get(Params_1.Key.Kid);
    const alg = coseKey.get(Params_1.Key.Alg);
    const crv = coseKey.get(Params_1.EC2.Crv);
    const foundAlgorithm = iana_1.iana["COSE Algorithms"].getByValue(alg);
    if (!foundAlgorithm) {
        throw new Error('This library requires keys to use fully specified algorithms');
    }
    const foundCurve = curves.find((param) => {
        return param.Value === `${crv}`;
    });
    if (!foundCurve) {
        throw new Error('This library requires does not support the given curve');
    }
    const jwk = {
        kty: 'EC',
        alg: foundAlgorithm.Name,
        crv: foundCurve.Name
    };
    const x = coseKey.get(Params_1.EC2.X);
    const y = coseKey.get(Params_1.EC2.Y);
    const d = coseKey.get(Params_1.EC2.D);
    if (x) {
        jwk.x = jose_1.base64url.encode(x);
    }
    if (y) {
        jwk.y = jose_1.base64url.encode(y);
    }
    if (d) {
        jwk.d = jose_1.base64url.encode(d);
    }
    // TODO check lengths for x, y, d
    if (kid && typeof kid === 'string') {
        jwk.kid = kid;
    }
    else {
        jwk.kid = yield (0, jose_1.calculateJwkThumbprint)(jwk);
    }
    return (0, formatJwk_1.formatJwk)(jwk);
});
exports.convertCoseKeyToJsonWebKey = convertCoseKeyToJsonWebKey;
