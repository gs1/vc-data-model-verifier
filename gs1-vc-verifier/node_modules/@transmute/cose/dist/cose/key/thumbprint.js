"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.thumbprint = void 0;
const jose_1 = require("jose");
const cbor_1 = require("../../cbor");
const subtleCryptoProvider_1 = __importDefault(require("../../crypto/subtleCryptoProvider"));
const Params_1 = require("../Params");
// https://www.ietf.org/archive/id/draft-ietf-cose-key-thumbprint-01.html#section-6
const calculateCoseKeyThumbprint = (coseKey) => __awaiter(void 0, void 0, void 0, function* () {
    if (coseKey.get(Params_1.Key.Kty) !== Params_1.KeyTypes.EC2) {
        throw new Error('Unsupported key type (Only EC2 are supported');
    }
    const onlyRequiredMap = new Map();
    const requiredKeys = [Params_1.EC2.Kty, Params_1.EC2.Crv, Params_1.EC2.X, Params_1.EC2.Y];
    for (const [key, value] of coseKey.entries()) {
        if (requiredKeys.includes(key)) {
            onlyRequiredMap.set(key, value);
        }
    }
    const encoded = (0, cbor_1.encodeCanonical)(onlyRequiredMap);
    const subtle = yield (0, subtleCryptoProvider_1.default)();
    const digest = subtle.digest("SHA-256", encoded);
    return digest;
});
const calculateCoseKeyThumbprintUri = (coseKey) => __awaiter(void 0, void 0, void 0, function* () {
    const prefix = `urn:ietf:params:oauth:ckt:sha-256`;
    const digest = yield calculateCoseKeyThumbprint(coseKey);
    return `${prefix}:${jose_1.base64url.encode(new Uint8Array(digest))}`;
});
exports.thumbprint = {
    calculateJwkThumbprint: jose_1.calculateJwkThumbprint,
    calculateJwkThumbprintUri: jose_1.calculateJwkThumbprintUri,
    calculateCoseKeyThumbprint,
    calculateCoseKeyThumbprintUri,
    uri: calculateCoseKeyThumbprintUri
};
