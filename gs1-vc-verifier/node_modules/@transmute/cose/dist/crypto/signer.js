"use strict";
/* eslint-disable @typescript-eslint/no-unused-vars */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cbor_1 = require("../cbor");
const subtleCryptoProvider_1 = __importDefault(require("./subtleCryptoProvider"));
const getDigestFromVerificationKey_1 = __importDefault(require("../cose/sign1/getDigestFromVerificationKey"));
const signer = ({ privateKeyJwk }) => {
    const digest = (0, getDigestFromVerificationKey_1.default)(`${privateKeyJwk.alg}`);
    const { alg } = privateKeyJwk, withoutAlg = __rest(privateKeyJwk, ["alg"]);
    return {
        sign: (toBeSigned) => __awaiter(void 0, void 0, void 0, function* () {
            const subtle = yield (0, subtleCryptoProvider_1.default)();
            const signingKey = yield subtle.importKey("jwk", withoutAlg, {
                name: "ECDSA",
                namedCurve: withoutAlg.crv,
            }, true, ["sign"]);
            const signature = yield subtle.sign({
                name: "ECDSA",
                hash: { name: digest },
            }, signingKey, toBeSigned);
            return (0, cbor_1.toArrayBuffer)(signature);
        })
    };
};
exports.default = signer;
