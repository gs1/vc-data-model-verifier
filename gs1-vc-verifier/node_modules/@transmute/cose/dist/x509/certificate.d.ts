/// <reference types="node" />
import { PublicKeyJwk } from "../cose/sign1";
import { CoseSignatureAlgorithms } from '../cose/key';
import { RequestCoseSign1VerifyDetached } from '..';
export type RequestRootCertificate = {
    alg: CoseSignatureAlgorithms;
    sub: string;
    iss: string;
    nbf: string;
    exp: string;
    serial: string;
};
export type RootCertificateResponse = {
    public: string;
    private: string;
};
export type RequestCertificateVerifier = {
    resolver: {
        resolve: (signature: ArrayBuffer) => Promise<PublicKeyJwk>;
    };
};
export declare const certificate: {
    thumbprint: (cert: string) => Promise<[number, ArrayBuffer]>;
    root: (req: RequestRootCertificate) => Promise<RootCertificateResponse>;
    pkcs8Signer: ({ alg, privateKeyPKCS8 }: {
        alg: number;
        privateKeyPKCS8: string;
    }) => Promise<{
        sign: (req: import("..").RequestCoseSign1) => Promise<Buffer>;
    }>;
    verifier: ({ resolver }: RequestCertificateVerifier) => {
        verify: (req: RequestCoseSign1VerifyDetached) => Promise<ArrayBuffer>;
    };
};
