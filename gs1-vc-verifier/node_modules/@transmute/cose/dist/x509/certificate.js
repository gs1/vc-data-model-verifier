"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.certificate = void 0;
const jose_1 = require("jose");
const x509 = __importStar(require("@peculiar/x509"));
const __1 = require("..");
const __2 = require("..");
// eslint-disable-next-line @typescript-eslint/no-empty-function
const nodeCrypto = Promise.resolve().then(() => __importStar(require('crypto'))).catch(() => { });
const extractable = true;
const provide = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        return window.crypto;
    }
    catch (e) {
        return yield (yield nodeCrypto);
    }
});
const algTowebCryptoParams = {
    'ESP256': {
        name: "ECDSA",
        hash: "SHA-256",
        namedCurve: "P-256",
    },
    'ESP384': {
        name: "ECDSA",
        hash: "SHA-384",
        namedCurve: "P-384",
    },
    'ES256': {
        name: "ECDSA",
        hash: "SHA-256",
        namedCurve: "P-256",
    },
    'ES384': {
        name: "ECDSA",
        hash: "SHA-384",
        namedCurve: "P-384",
    },
    'ES512': {
        name: "ECDSA",
        hash: "SHA-512",
        namedCurve: "P-521",
    }
};
// https://datatracker.ietf.org/doc/html/rfc9360#section-2-5.6.1
const thumbprint = (cert) => __awaiter(void 0, void 0, void 0, function* () {
    const current = new x509.X509Certificate(cert);
    return [__1.Hash.SHA256, yield current.getThumbprint('SHA-256')];
});
const root = (req) => __awaiter(void 0, void 0, void 0, function* () {
    const crypto = yield provide();
    x509.cryptoProvider.set(crypto);
    const extensions = [
    // {
    //   type: 'url', value: `https://vendor.example`
    // }
    ];
    const webCryptoAlgorithm = algTowebCryptoParams[req.alg];
    const caKeys = yield crypto.subtle.generateKey(webCryptoAlgorithm, extractable, ["sign", "verify"]);
    const caCert = yield x509.X509CertificateGenerator.create({
        serialNumber: req.serial || "01",
        subject: req.sub,
        issuer: req.iss,
        notBefore: new Date(req.nbf),
        notAfter: new Date(req.exp),
        signingAlgorithm: webCryptoAlgorithm,
        publicKey: caKeys.publicKey,
        signingKey: caKeys.privateKey,
        extensions: [
            new x509.SubjectAlternativeNameExtension(extensions),
            yield x509.SubjectKeyIdentifierExtension.create(caKeys.publicKey)
        ]
    });
    const certPublic = caCert.toString();
    const certPrivate = yield (0, jose_1.exportPKCS8)(caKeys.privateKey);
    return { public: certPublic, private: certPrivate };
});
const pkcs8Signer = ({ alg, privateKeyPKCS8 }) => __awaiter(void 0, void 0, void 0, function* () {
    const foundAlgorithm = Object.values(__1.IANACOSEAlgorithms).find((entry) => {
        return entry.Value === `${alg}`;
    });
    if (!foundAlgorithm) {
        throw new Error('Could not find algorithm in registry for: ' + alg);
    }
    const privateKeyJwk = yield (0, jose_1.exportJWK)(yield (0, jose_1.importPKCS8)(privateKeyPKCS8, `${foundAlgorithm.Name}`));
    privateKeyJwk.alg = foundAlgorithm.Name;
    return __1.detached.signer({
        remote: __2.crypto.signer({
            privateKeyJwk
        })
    });
});
const verifier = ({ resolver }) => {
    return {
        verify: (req) => __awaiter(void 0, void 0, void 0, function* () {
            const verifier = __1.detached.verifier({ resolver });
            return verifier.verify(req);
        })
    };
};
exports.certificate = { thumbprint, root, pkcs8Signer, verifier };
