"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInclusionProofForLeaf = void 0;
const highestPowerOf2LessThanN_1 = require("../RFC9162/highestPowerOf2LessThanN");
const getRootFromLeaves_1 = require("./getRootFromLeaves");
const PATH = (m, D_n) => __awaiter(void 0, void 0, void 0, function* () {
    const n = D_n.length;
    if (n === 1 && m === 0) {
        return [];
    }
    const k = (0, highestPowerOf2LessThanN_1.highestPowerOf2LessThanN)(n);
    if (m < k) {
        const first = yield PATH(m, D_n.slice(0, k)); // PATH(m, D[0:k])
        const second = yield (0, getRootFromLeaves_1.getRootFromLeaves)(D_n.slice(k, n)); // MTH(D[k:n])
        return first.concat(second);
    }
    // m >= k
    const first = yield PATH(m - k, D_n.slice(k, n)); // PATH(m - k, D[k:n])
    const second = yield (0, getRootFromLeaves_1.getRootFromLeaves)(D_n.slice(0, k)); // MTH(D[0:k])
    return first.concat(second);
});
const getInclusionProofForLeaf = (leaf_index, leaves) => __awaiter(void 0, void 0, void 0, function* () {
    if (leaf_index < 0 || leaf_index > leaves.length) {
        throw new Error('Entry is not included in log.');
    }
    return {
        log_id: '',
        tree_size: leaves.length,
        leaf_index: leaf_index,
        inclusion_path: yield PATH(leaf_index, leaves),
    };
});
exports.getInclusionProofForLeaf = getInclusionProofForLeaf;
