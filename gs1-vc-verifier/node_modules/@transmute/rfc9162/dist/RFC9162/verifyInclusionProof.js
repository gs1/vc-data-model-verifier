"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyInclusionProof = void 0;
const CONCAT_1 = require("./CONCAT");
const hexToBin_1 = require("./hexToBin");
const HASH_1 = require("./HASH");
const EQUAL_1 = require("./EQUAL");
const verifyInclusionProof = (root_hash, hash, proof) => __awaiter(void 0, void 0, void 0, function* () {
    const { tree_size, leaf_index, inclusion_path } = proof;
    if (leaf_index > tree_size) {
        return false;
    }
    let fn = leaf_index;
    let sn = tree_size - 1;
    let r = hash;
    const prefix = (0, hexToBin_1.hexToBin)('01');
    for (const p of inclusion_path) {
        // a.  If sn is 0, then stop the iteration and fail the proof verification.
        if (sn === 0) {
            return false;
        }
        // b.  If LSB(fn) is set, or if fn is equal to sn, then:
        if (fn % 2 === 1 || fn === sn) {
            // i.   Set r to HASH(0x01 || p || r).
            r = yield (0, HASH_1.HASH)((0, CONCAT_1.CONCAT)(prefix, (0, CONCAT_1.CONCAT)(p, r)));
            // ii.  If LSB(fn) is not set, then right-shift both fn and sn
            // equally until either LSB(fn) is set or fn is 0.
            while (fn % 2 !== 1) {
                fn = fn >> 1;
                sn = sn >> 1;
                if (fn === 0) {
                    break;
                }
            }
            // Otherwise:
        }
        else {
            // i.  Set r to HASH(0x01 || r || p).
            r = yield (0, HASH_1.HASH)((0, CONCAT_1.CONCAT)(prefix, (0, CONCAT_1.CONCAT)(r, p)));
        }
        // c.  Finally, right-shift both fn and sn one time.
        fn = fn >> 1;
        sn = sn >> 1;
    }
    const roots_match = (0, EQUAL_1.EQUAL)(r, root_hash);
    const sn_is_0 = sn === 0;
    return sn_is_0 && roots_match;
});
exports.verifyInclusionProof = verifyInclusionProof;
