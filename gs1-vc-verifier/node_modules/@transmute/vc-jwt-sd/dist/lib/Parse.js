"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const jose_1 = require("jose");
const constants_1 = require("./constants");
const compact = (jws, options = { decodeDisclosure: false }) => {
    var _a;
    const components = jws.split(constants_1.COMBINED_serialization_FORMAT_SEPARATOR);
    const jwt = components.shift();
    const result = { jwt };
    if (components[components.length - 1].includes('.')) {
        result.kbt = components.pop();
    }
    if (components.length) {
        result.disclosures = components.filter((d) => {
            return d.length > 0;
        });
    }
    if (options.decodeDisclosure) {
        result.disclosures = (_a = result.disclosures) === null || _a === void 0 ? void 0 : _a.map((d) => {
            return JSON.parse(new TextDecoder().decode(jose_1.base64url.decode(d)));
        });
    }
    if (!result.disclosures) {
        result.disclosures = [];
    }
    return result;
};
const expload = (jws, config) => __awaiter(void 0, void 0, void 0, function* () {
    const parsed = compact(jws);
    const decodedIssuance = (0, jose_1.decodeJwt)(parsed.jwt);
    parsed.issued = decodedIssuance;
    const hash = config.digester;
    const hashToDisclosureMap = {};
    const hashToEncodedDisclosureMap = {};
    for (const encoded of parsed.disclosures) {
        const hashed = yield hash.digest(encoded);
        hashToEncodedDisclosureMap[hashed] = encoded;
        hashToDisclosureMap[hashed] = JSON.parse(new TextDecoder().decode(jose_1.base64url.decode(encoded)));
    }
    parsed.disclosureMap = hashToDisclosureMap;
    parsed.hashToEncodedDisclosureMap = hashToEncodedDisclosureMap;
    return parsed;
});
const Parse = { compact, expload };
exports.default = Parse;
