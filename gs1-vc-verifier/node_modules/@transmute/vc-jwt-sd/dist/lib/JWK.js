"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPublicKey = void 0;
const jose_1 = require("jose");
const format = (jwk) => {
    const { kid, x5u, x5c, x5t, kty, crv, alg, key_ops, x, y, d } = jwk, rest = __rest(jwk, ["kid", "x5u", "x5c", "x5t", "kty", "crv", "alg", "key_ops", "x", "y", "d"]);
    return JSON.parse(JSON.stringify(Object.assign({ kid,
        x5u,
        x5c,
        x5t,
        kty,
        crv,
        alg,
        key_ops,
        x,
        y,
        d }, rest)));
};
const getPublicKey = (jwk) => {
    const { d, p, q, dp, dq, qi, oth, k, key_ops } = jwk, publicKeyJwk = __rest(jwk, ["d", "p", "q", "dp", "dq", "qi", "oth", "k", "key_ops"]);
    return format(publicKeyJwk);
};
exports.getPublicKey = getPublicKey;
const getExtractableKeyPair = (alg) => __awaiter(void 0, void 0, void 0, function* () {
    const keypair = yield (0, jose_1.generateKeyPair)(alg, { extractable: true });
    const publicKeyJwk = yield (0, jose_1.exportJWK)(keypair.publicKey);
    publicKeyJwk.alg = alg;
    publicKeyJwk.kid = yield (0, jose_1.calculateJwkThumbprint)(publicKeyJwk);
    const privateKeyJwk = yield (0, jose_1.exportJWK)(keypair.privateKey);
    privateKeyJwk.alg = alg;
    privateKeyJwk.kid = yield (0, jose_1.calculateJwkThumbprint)(privateKeyJwk);
    return {
        publicKeyJwk: format(publicKeyJwk),
        privateKeyJwk: format(privateKeyJwk)
    };
});
const JWK = { format, getPublicKey: exports.getPublicKey, generate: getExtractableKeyPair };
exports.default = JWK;
