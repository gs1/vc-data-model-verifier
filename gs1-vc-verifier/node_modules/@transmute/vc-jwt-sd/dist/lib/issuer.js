"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const YAML_SD_1 = __importDefault(require("../YAML-SD"));
const digester_1 = __importDefault(require("./digester"));
const salter_1 = __importDefault(require("./salter"));
const JWS_1 = __importDefault(require("./JWS"));
const moment_1 = __importDefault(require("moment"));
const constants_1 = require("./constants");
const issuancePayload_1 = require("../YAML-SD/issuancePayload");
const sortProtectedHeader_1 = require("./sortProtectedHeader");
const issuer = (options) => {
    if (options.privateKeyJwk) {
        options.alg = options.privateKeyJwk.alg;
    }
    if (!options.digester) {
        options.digester = (0, digester_1.default)();
    }
    if (!options.salter) {
        options.salter = (0, salter_1.default)();
    }
    if (!options.alg && options.signer) {
        throw new Error('alg must be passed as an option or restricted via privateKeyJwk');
    }
    return {
        issue: ({ claimset, jwk, kid, iat, exp }) => __awaiter(void 0, void 0, void 0, function* () {
            if (!options.signer) {
                if (!options.privateKeyJwk) {
                    throw new Error("signer or privateKeyJwk required for issuance");
                }
                options.signer = yield JWS_1.default.signer(options.privateKeyJwk);
            }
            if (!options.digester) {
                throw new Error('digester is required.');
            }
            const config = {
                disclosures: {},
                salter: options.salter,
                digester: options.digester,
            };
            const issuedPayload = yield (0, issuancePayload_1.issuancePayload)(YAML_SD_1.default.load(claimset), config);
            const protectedHeader = { alg: options.alg, kid: options.kid, typ: options.typ, cty: options.cty };
            const claims = Object.assign({ iss: options.iss, iat: iat || (0, moment_1.default)().unix(), exp: exp || (0, moment_1.default)().add(2, 'weeks').unix(), cnf: jwk || kid ? {
                    jwk,
                    kid,
                } : undefined, [constants_1.DIGEST_ALG_KEY]: config.digester.name }, issuedPayload);
            const issuedJwt = yield options.signer.sign({
                protectedHeader: (0, sortProtectedHeader_1.sortProtectedHeader)(protectedHeader),
                claimset: claims,
            });
            const issuedSdJwt = issuedJwt + constants_1.COMBINED_serialization_FORMAT_SEPARATOR + Object.keys(config.disclosures)
                .join(constants_1.COMBINED_serialization_FORMAT_SEPARATOR);
            return issuedSdJwt;
        })
    };
};
exports.default = issuer;
