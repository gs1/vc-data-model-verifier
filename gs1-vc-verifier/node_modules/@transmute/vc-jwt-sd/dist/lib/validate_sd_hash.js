"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate_sd_hash = void 0;
const sd_hash_1 = require("./sd_hash");
const validate_sd_hash = (presentation_token, key_binding_sd_hash, debug = false) => __awaiter(void 0, void 0, void 0, function* () {
    const parts = presentation_token.split('~');
    parts.pop(); // remove kbt from the end
    const presented_token = parts.join('~') + '~';
    const presentation_digest = yield sd_hash_1.sd_hash.compute(presented_token);
    const isPresentedTokenCommitedToInKeyBindingToken = presentation_digest === key_binding_sd_hash;
    if (debug) {
        console.info("Key Binding Token sd_hash matches presentation token");
    }
    if (!isPresentedTokenCommitedToInKeyBindingToken) {
        throw new Error("Key Binding Token sd_hash does not match presentation token");
    }
});
exports.validate_sd_hash = validate_sd_hash;
