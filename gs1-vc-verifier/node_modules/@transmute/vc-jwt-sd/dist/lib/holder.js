"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const YAML_SD_1 = __importDefault(require("../YAML-SD"));
const digester_1 = __importDefault(require("./digester"));
const salter_1 = __importDefault(require("./salter"));
const JWS_1 = __importDefault(require("./JWS"));
const moment_1 = __importDefault(require("moment"));
const jose = __importStar(require("jose"));
const constants_1 = require("./constants");
const _select_disclosures_1 = __importDefault(require("./_select_disclosures"));
const Parse_1 = __importDefault(require("./Parse"));
const sortProtectedHeader_1 = require("./sortProtectedHeader");
const sd_hash_1 = require("./sd_hash");
const holder = (options = {}) => {
    if (options.privateKeyJwk) {
        options.alg = options.privateKeyJwk.alg;
    }
    if (!options.digester) {
        options.digester = (0, digester_1.default)();
    }
    if (!options.salter) {
        options.salter = (0, salter_1.default)();
    }
    if (!options.alg && options.signer) {
        throw new Error('alg must be passed as an option or restricted via privateKeyJwk');
    }
    return {
        issue: ({ token, disclosure, audience, nonce }) => __awaiter(void 0, void 0, void 0, function* () {
            if (options.privateKeyJwk) {
                options.signer = yield JWS_1.default.signer(options.privateKeyJwk);
            }
            const parsed = Parse_1.default.compact(token);
            // todo: verify
            const sd_jwt_payload = jose.decodeJwt(parsed.jwt);
            const { disclosureMap, hashToEncodedDisclosureMap } = yield Parse_1.default.expload(token, options);
            const state = {
                hs_disclosures: [],
                _hash_to_disclosure: hashToEncodedDisclosureMap,
                _hash_to_decoded_disclosure: disclosureMap
            };
            const parsedDisclosure = JSON.parse(JSON.stringify(YAML_SD_1.default.load(disclosure), null, 2));
            // todo convert to a walk operation
            (0, _select_disclosures_1.default)(sd_jwt_payload, parsedDisclosure, state);
            // state now contains stuff.
            const disclosures = [...state.hs_disclosures];
            if (sd_jwt_payload.cnf && (!audience || !nonce)) {
                throw new Error('Credential requires confirmation but audience and nonce are missing.');
            }
            let presented_token = parsed.jwt;
            if (disclosures.length) {
                presented_token += constants_1.COMBINED_serialization_FORMAT_SEPARATOR + disclosures.join(constants_1.COMBINED_serialization_FORMAT_SEPARATOR);
            }
            presented_token += constants_1.COMBINED_serialization_FORMAT_SEPARATOR;
            if (audience && nonce) {
                if (!sd_jwt_payload.cnf) {
                    throw new Error('Credential does not contain confirmation method, therefore audience and nonce are not supported.');
                }
                if (!options.signer) {
                    throw new Error('Signer is required.');
                }
                const disclosure_digest = yield sd_hash_1.sd_hash.compute(presented_token);
                const kbt = yield options.signer.sign({
                    protectedHeader: (0, sortProtectedHeader_1.sortProtectedHeader)({ alg: options.alg, kid: options.kid, typ: constants_1.KB_JWT_TYP_HEADER }),
                    claimset: {
                        iss: options.iss,
                        iat: (0, moment_1.default)().unix(),
                        nonce,
                        aud: audience,
                        sd_hash: disclosure_digest
                    }
                });
                presented_token += kbt;
            }
            return presented_token;
        })
    };
};
exports.default = holder;
