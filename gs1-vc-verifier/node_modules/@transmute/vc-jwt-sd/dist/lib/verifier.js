"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const digester_1 = __importDefault(require("./digester"));
const JWS_1 = __importDefault(require("./JWS"));
const Parse_1 = __importDefault(require("./Parse"));
const constants_1 = require("./constants");
const _unpack_disclosed_claims_1 = __importDefault(require("./_unpack_disclosed_claims"));
const jose_1 = require("jose");
const validate_public_claims_1 = require("./validate_public_claims");
const validate_sd_hash_1 = require("./validate_sd_hash");
function verifier(options) {
    if (!options.digester) {
        options.digester = (0, digester_1.default)();
    }
    if (options.publicKeyJwk) {
        const { publicKeyJwk } = options;
        options.alg = options.alg || publicKeyJwk.alg;
        if (!options.alg) {
            throw new Error('alg must be passed as an option or restricted via publicKeyJwk');
        }
        options.verifier = {
            verify: (token) => __awaiter(this, void 0, void 0, function* () {
                const { jwt } = Parse_1.default.compact(token);
                const verifier = yield JWS_1.default.verifier(publicKeyJwk);
                return verifier.verify(jwt);
            })
        };
    }
    return {
        verify: ({ token, audience, nonce }) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            const debug = false;
            const { jwt, kbt } = Parse_1.default.compact(token);
            const decodedHeader = (0, jose_1.decodeProtectedHeader)(jwt);
            let verifiedIssuanceToken;
            if (options.verifier) {
                verifiedIssuanceToken = yield options.verifier.verify(token);
            }
            else if (options.resolver) {
                if (!decodedHeader.kid) {
                    throw new Error('kid is required when resolver is used to obtain public keys');
                }
                const issuerPublicKey = yield options.resolver.resolve(decodedHeader.kid);
                const compactJwsVerifier = yield JWS_1.default.verifier(issuerPublicKey);
                verifiedIssuanceToken = yield compactJwsVerifier.verify(jwt);
            }
            else {
                throw new Error('a verifier or resolver is required, but not present.');
            }
            if (!options.digester) {
                throw new Error('digester is required');
            }
            if (verifiedIssuanceToken.claimset[constants_1.DIGEST_ALG_KEY] !== options.digester.name) {
                throw new Error('Invalid hash algorithm');
            }
            // here we are verifying the "Issuer Signed JWT"
            // aud and nonce, are expected to be checked in the KBT, not the "Issuer Signed JWT".
            // See: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/395
            (0, validate_public_claims_1.validate_public_claims)('Issuer-signed JWT', verifiedIssuanceToken.claimset, {
                debug,
                reference_audience: verifiedIssuanceToken.claimset.aud,
                reference_nonce: verifiedIssuanceToken.claimset.nonce
            });
            if (debug) {
                console.info('Verified Issuer-signed JWT: ', JSON.stringify(verifiedIssuanceToken, null, 2));
            }
            const { cnf } = verifiedIssuanceToken.claimset;
            if (cnf) {
                if (!kbt) {
                    throw new Error('Verification of this credential requires proof of posession from the holder. Key binding token is expected based on claims, but was not found.');
                }
                try {
                    let kid;
                    let jwk;
                    let confirmationPublicKey;
                    let verified;
                    const { cnf } = verifiedIssuanceToken.claimset;
                    if (cnf.jwk) {
                        ({ cnf: { jwk } } = verifiedIssuanceToken.claimset);
                        confirmationPublicKey = jwk;
                        if (debug) {
                            console.info('Issued JWT has JWK confirmation method.');
                        }
                    }
                    if ((verifiedIssuanceToken.claimset.cnf).kid) {
                        ({ cnf: { kid } } = verifiedIssuanceToken.claimset);
                        if (debug) {
                            console.info('Issued JWT has kid confirmation method.');
                        }
                        if (!options.resolver) {
                            throw new Error('Resolver is required for kid confirmation method');
                        }
                        confirmationPublicKey = yield ((_a = options.resolver) === null || _a === void 0 ? void 0 : _a.resolve(kid));
                    }
                    const compactJwsVerifier = yield JWS_1.default.verifier(confirmationPublicKey);
                    verified = yield compactJwsVerifier.verify(kbt);
                    if (!verified) {
                        throw new Error('Failed to verify key binding token');
                    }
                    yield (0, validate_sd_hash_1.validate_sd_hash)(token, verified.claimset.sd_hash, debug);
                    (0, validate_public_claims_1.validate_public_claims)('Key Binding Token', verified.claimset, {
                        debug,
                        reference_audience: audience,
                        reference_nonce: nonce
                    });
                    if (debug) {
                        console.info('Verified Key Binding Token: ', JSON.stringify(verified, null, 2));
                    }
                }
                catch (e) {
                    console.error(e);
                    throw new Error('Failed to validate key binding token.');
                }
            }
            else {
                if (debug) {
                    console.info('Issued JWT has no confirmation method.');
                }
            }
            const { disclosureMap, hashToEncodedDisclosureMap } = yield Parse_1.default.expload(token, options);
            const state = { _hash_to_disclosure: hashToEncodedDisclosureMap, _hash_to_decoded_disclosure: disclosureMap };
            const output = (0, _unpack_disclosed_claims_1.default)(verifiedIssuanceToken.claimset, state);
            const verified = JSON.parse(JSON.stringify({ protectedHeader: verifiedIssuanceToken.protectedHeader, claimset: output }));
            return verified;
        })
    };
}
exports.default = verifier;
