"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.disclose = exports.redactSource = void 0;
const yaml_1 = require("yaml");
const constants_1 = require("./constants");
const parseCustomTags_1 = require("./parseCustomTags");
const yamlOptions_1 = require("./yamlOptions");
const fakePair = (sourcePair) => {
    let fake;
    if (sourcePair.value instanceof yaml_1.Scalar) {
        fake = { value: new yaml_1.Scalar(false) };
    }
    if (sourcePair.value instanceof yaml_1.YAMLSeq) {
        fake = {
            value: fakeSequence(sourcePair.value.items.length),
        };
    }
    if (sourcePair.value instanceof yaml_1.YAMLMap) {
        fake = sourcePair;
    }
    return fake;
};
const discloseWalkMap = (source, target) => {
    const indexList = [];
    for (const index in source.items) {
        const sourcePair = source.items[index];
        const targetPair = target.items.find((item) => {
            return item.key.value === sourcePair.key.value;
        }) || fakePair(sourcePair);
        if (sourcePair.value instanceof yaml_1.YAMLSeq && targetPair.value instanceof yaml_1.YAMLSeq) {
            discloseWalkList(sourcePair.value, targetPair.value);
        }
        if (sourcePair.value instanceof yaml_1.YAMLMap && targetPair.value instanceof yaml_1.YAMLMap) {
            discloseWalkMap(sourcePair.value, targetPair.value);
        }
        if (sourcePair.key.tag === constants_1.discloseTag && targetPair.value.value === false) {
            indexList.push(parseInt(index, 10));
        }
    }
    (0, exports.redactSource)(source, indexList);
};
const discloseWalkList = (source, target) => {
    const indexList = [];
    for (const index in source.items) {
        const sourceElement = source.items[index];
        let targetElement = target.items[index];
        if (sourceElement instanceof yaml_1.YAMLSeq) {
            if (targetElement === undefined || targetElement.value === false) {
                targetElement = fakeSequence(sourceElement.items.length);
            }
            if (targetElement instanceof yaml_1.YAMLSeq) {
                discloseWalkList(sourceElement, targetElement);
            }
        }
        if (sourceElement instanceof yaml_1.YAMLMap) {
            if (targetElement instanceof yaml_1.YAMLMap) {
                discloseWalkMap(sourceElement, targetElement);
            }
        }
        if (sourceElement.tag === constants_1.discloseTag) {
            if (targetElement.value === false) {
                indexList.push(parseInt(index, 10));
            }
        }
    }
    (0, exports.redactSource)(source, indexList);
};
const redactSource = (source, indexList) => {
    source.items = source.items.filter((_, i) => {
        discloseReplace(source.items[i]);
        return !indexList.includes(i);
    });
};
exports.redactSource = redactSource;
const fakeSequence = (length) => {
    const fake = new yaml_1.YAMLSeq();
    fake.items = new Array(length).fill({
        value: false,
    });
    return fake;
};
const discloseReplace = (source) => {
    if (source instanceof yaml_1.Scalar ||
        source instanceof yaml_1.YAMLSeq ||
        source instanceof yaml_1.YAMLMap) {
        const mutate = source;
        delete mutate.toJSON;
        delete mutate.sd;
        delete mutate.tag;
    }
    else if (source instanceof yaml_1.Pair) {
        const mutate = source;
        // indicates performance opportunity...
        if (typeof mutate.key !== 'string') {
            mutate.key.value = `${mutate.key.value}`;
            delete mutate.key.tag;
            delete mutate.value.toJSON;
            delete mutate.value.sd;
            delete mutate.value.tag;
        }
    }
    else {
        console.log(source);
        throw new Error("discloseReplace, Unhandled disclosure case");
    }
};
const disclose = (source, target) => {
    const doc1 = (0, parseCustomTags_1.parseCustomTags)(source);
    const doc2 = (0, parseCustomTags_1.parseCustomTags)(target);
    discloseWalkMap(doc1.contents, doc2.contents);
    return (0, yaml_1.stringify)(doc1, yamlOptions_1.yamlOptions);
};
exports.disclose = disclose;
