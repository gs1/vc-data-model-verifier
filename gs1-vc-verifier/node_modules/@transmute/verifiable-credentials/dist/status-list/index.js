"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bs = exports.create = void 0;
const yaml_1 = __importDefault(require("yaml"));
const uuid_1 = require("uuid");
const StatusList_1 = __importDefault(require("./StatusList"));
const Bitstring_1 = require("./StatusList/Bitstring");
const sortClaims = (statusList) => {
    const { id, type, issuer, validFrom, validUntil, credentialSubject } = statusList;
    return JSON.parse(JSON.stringify({
        '@context': statusList['@context'],
        id, type, issuer, validFrom, validUntil, credentialSubject
    }));
};
const create = ({ issuer, validFrom, validUntil, id, purpose, } = {
    issuer: 'https://issuer.example',
    validFrom: new Date().toISOString(),
    id: `urn:uuid:${(0, uuid_1.v4)()}`,
    purpose: 'revocation',
}) => __awaiter(void 0, void 0, void 0, function* () {
    const statusList = yield StatusList_1.default.create({
        id,
        purpose,
        length: 131072, // from the spec 
    });
    statusList.issuer = { id: issuer };
    statusList.validFrom = validFrom;
    if (validUntil) {
        statusList.validUntil = validUntil;
    }
    return yaml_1.default.stringify(sortClaims(statusList));
});
exports.create = create;
class BS {
    constructor(data) {
        if (typeof data === 'number') {
            this.bs = new Bitstring_1.Bitstring({ length: data });
        }
        else {
            const buffer = Bitstring_1.Bitstring.decodeBits({ encoded: data });
            this.bs = new Bitstring_1.Bitstring({ buffer });
        }
    }
    set(position, bit) {
        this.bs.set(position, bit);
        return this;
    }
    get(position) {
        return this.bs.get(position);
    }
    encode() {
        return this.bs.encodeBits();
    }
}
const bs = (data) => {
    return new BS(data);
};
exports.bs = bs;
