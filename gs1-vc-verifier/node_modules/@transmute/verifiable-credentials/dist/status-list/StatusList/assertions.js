"use strict";
/*!
 * Copyright (c) 2020 Digital Bazaar, Inc. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isUint8Array = exports.isNonNegativeInteger = exports.isBoolean = exports.isString = exports.isPositiveInteger = exports.isNumber = void 0;
// Modified for TypeScript by Orie Steele
function isNumber(value, name) {
    if (typeof value !== 'number') {
        throw new TypeError(`"${name}" must be number.`);
    }
}
exports.isNumber = isNumber;
function isPositiveInteger(value, name) {
    if (!(Number.isInteger(value) && value > 0)) {
        throw new TypeError(`"${name}" must be a positive integer.`);
    }
}
exports.isPositiveInteger = isPositiveInteger;
function isString(value, name) {
    if (typeof value !== 'string') {
        throw new TypeError(`"${name}" must be a string.`);
    }
}
exports.isString = isString;
function isBoolean(value, name) {
    if (typeof value !== 'boolean') {
        throw new TypeError(`"${name}" must be a boolean.`);
    }
}
exports.isBoolean = isBoolean;
function isNonNegativeInteger(value, name) {
    if (!(Number.isInteger(value) && value >= 0)) {
        throw new TypeError(`"${name}" must be a non-negative integer.`);
    }
}
exports.isNonNegativeInteger = isNonNegativeInteger;
function isUint8Array(value, name) {
    if (!(value instanceof Uint8Array)) {
        throw new TypeError(`"${name}" must be a Uint8Array.`);
    }
}
exports.isUint8Array = isUint8Array;
