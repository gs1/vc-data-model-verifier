/*!
 * Copyright (c) 2020-2023 Digital Bazaar, Inc. All rights reserved.
 */
export type BitstringConstructorArguments = {
    length?: number;
    buffer?: Uint8Array;
    leftToRightIndexing?: boolean;
    littleEndianBits?: boolean;
};
export type EncodedBits = {
    encoded: string;
};
export type CompressedBits = {
    compressed: Uint8Array;
};
export declare class Bitstring {
    length: number;
    bits: Uint8Array;
    leftToRightIndexing: boolean;
    /**
     * Creates a new Bitstring  instance.
     *
     * @param {object} options - The options to use.
     * @param {number} [options.length] - The length of the bitstring in bits;
     *   either this or `buffer` must be given, but not both.
     * @param {Uint8Array} [options.buffer] - The bitstring as a buffer of bytes
     *   where the bytes are always in big endian order (left most byte or most
     *   significant byte in the buffer will be the least significant and lowest
     *   index byte in the bitstring) and where the bit order
     *   is also little endian by default but may be specified as big endian
     *   by passing `leftToRightIndexing: false`; either this parameter or
     *   `length` must be given but not both.
     * @param {boolean} [options.leftToRightIndexing=true] - Whether the bit
     *   order (NOT the byte order, which is *always* first byte in the buffer is
     *   the first byte-index into the bitstring, i.e., left to right) is left to
     *   right or not; the default is left to right, which matches what the byte
     *   order always is and, specifically, means that `0x80` or `0b1000000`
     *   means the first bit index is set in a given byte.
     * @param {boolean} [options.littleEndianBits] - Deprecated; use
     *   `leftToRightIndexing` instead.
     */
    constructor({ length, buffer, leftToRightIndexing, littleEndianBits, }?: BitstringConstructorArguments);
    set(position: number, on: boolean): void;
    get(position: number): boolean;
    encodeBits(): Promise<string>;
    static decodeBits({ encoded }: EncodedBits): Uint8Array;
    compressBits(): Promise<Uint8Array>;
    static uncompressBits({ compressed }: CompressedBits): Promise<Uint8Array>;
}
