"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifier = exports.verifyUnsecuredPresentation = void 0;
const jose = __importStar(require("jose"));
const cose = __importStar(require("@transmute/cose"));
const vc_jwt_sd_1 = __importDefault(require("@transmute/vc-jwt-sd"));
const key_1 = require("../key");
const text_1 = require("../text");
const acceptableAudience = (expectedAud, receivedAud) => {
    return Array.isArray(receivedAud) ? receivedAud.includes(expectedAud) : receivedAud === expectedAud;
};
const verifyJwt = ({ resolver }, { type, content, audience, nonce }) => __awaiter(void 0, void 0, void 0, function* () {
    const key = yield resolver.resolve({ type, content, purpose: 'verification-material' });
    const publicKey = yield (0, key_1.importKeyLike)(key);
    const jwt = text_1.decoder.decode(content);
    const { payload } = yield jose.jwtVerify(jwt, publicKey, {
        issuer: undefined,
        audience: audience,
    });
    if (payload.nonce && payload.nonce !== nonce) {
        throw new Error('Verifier did not supply nonce: ' + payload.nonce);
    }
    if (payload.aud && !acceptableAudience(`${audience}`, payload.aud)) {
        throw new Error('Verifier  did not supply audience: ' + payload.aud);
    }
    return payload;
});
const verifyCoseSign1 = ({ resolver }, { type, content, audience, nonce }) => __awaiter(void 0, void 0, void 0, function* () {
    const verifier = cose.attached.verifier({
        resolver: {
            resolve: () => __awaiter(void 0, void 0, void 0, function* () {
                const key = yield resolver.resolve({
                    type,
                    content,
                    purpose: 'verification-material'
                });
                return (0, key_1.importJWK)(key);
            })
        }
    });
    const verified = yield verifier.verify({
        coseSign1: content
    });
    const payload = JSON.parse(text_1.decoder.decode(verified));
    if (payload.nonce && payload.nonce !== nonce) {
        throw new Error('Verifier did not supply nonce: ' + payload.nonce);
    }
    if (payload.aud && !acceptableAudience(`${audience}`, payload.aud)) {
        throw new Error('Verifier  did not supply audience: ' + payload.aud);
    }
    return payload;
});
const verifyUnsecuredPresentation = ({ resolver }, { content, audience, nonce }) => __awaiter(void 0, void 0, void 0, function* () {
    const dataModel = JSON.parse(text_1.decoder.decode(content));
    for (const vc of dataModel.verifiableCredential || []) {
        if (vc.type !== 'EnvelopedVerifiableCredential') {
            throw new Error('Unsupported verifiable credential type');
        }
        const [start] = vc.id.split(';');
        const type = start.replace('data:', '');
        const content = text_1.encoder.encode(vc.id.split(';').pop());
        const { verify } = (0, exports.verifier)({ resolver });
        yield verify({ type, content, audience, nonce });
    }
    return dataModel;
});
exports.verifyUnsecuredPresentation = verifyUnsecuredPresentation;
const verifySdJwtCredential = ({ resolver }, { type, content, audience, nonce }) => __awaiter(void 0, void 0, void 0, function* () {
    const verifier = vc_jwt_sd_1.default.verifier({
        resolver: {
            resolve: () => __awaiter(void 0, void 0, void 0, function* () {
                const key = yield resolver.resolve({
                    type,
                    content,
                    purpose: 'verification-material'
                });
                return (0, key_1.importJWK)(key);
            })
        }
    });
    const verified = yield verifier.verify({
        token: text_1.decoder.decode(content),
        audience: audience,
        nonce: nonce
    });
    return verified.claimset;
});
const verifySdJwtPresentation = ({ resolver }, { type, content, audience, nonce }) => __awaiter(void 0, void 0, void 0, function* () {
    const verifier = vc_jwt_sd_1.default.verifier({
        resolver: {
            resolve: () => __awaiter(void 0, void 0, void 0, function* () {
                const key = yield resolver.resolve({
                    type,
                    content,
                    purpose: 'verification-material'
                });
                return (0, key_1.importJWK)(key);
            })
        }
    });
    const verified = yield verifier.verify({
        token: text_1.decoder.decode(content),
        audience: audience,
        nonce: nonce
    });
    return verified.claimset;
});
const verifier = ({ resolver }) => {
    return {
        verify: ({ type, content, audience, nonce }) => __awaiter(void 0, void 0, void 0, function* () {
            switch (type) {
                case 'application/vc-ld+cose':
                case 'application/vp-ld+cose': {
                    return verifyCoseSign1({ resolver }, { type, content, audience, nonce });
                }
                case 'application/vc-ld+jwt':
                case 'application/vp-ld+jwt':
                case 'application/kb+jwt': {
                    return verifyJwt({ resolver }, { type, content, audience, nonce });
                }
                case 'application/vc-ld+sd-jwt': {
                    return verifySdJwtCredential({ resolver }, { type, content, audience, nonce });
                }
                case 'application/vp-ld+sd-jwt': {
                    return verifySdJwtPresentation({ resolver }, { type, content, audience, nonce });
                }
                case 'application/vp-ld': {
                    return (0, exports.verifyUnsecuredPresentation)({ resolver }, { type, content, audience, nonce });
                }
                default: {
                    throw new Error('Verifier does not support content type: ' + type);
                }
            }
        })
    };
};
exports.verifier = verifier;
