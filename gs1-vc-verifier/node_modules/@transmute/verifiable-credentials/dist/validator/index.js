"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validator = void 0;
const verifier_1 = require("../verifier");
const text_1 = require("../text");
const status_list_1 = require("../status-list");
const w3c_1 = require("./w3c");
const ajv_1 = require("./ajv");
const validator = ({ resolver }) => {
    return {
        validate: ({ type, content }) => __awaiter(void 0, void 0, void 0, function* () {
            const verified = yield (0, verifier_1.verifier)({ resolver }).verify({ type, content });
            const validation = {
                verified: true,
                content: verified,
                schema: {},
                status: {},
                warnings: [],
            };
            const { credentialSchema, credentialStatus } = verified;
            if (credentialSchema) {
                const schemas = (Array.isArray(credentialSchema) ? verified.credentialSchema : [credentialSchema]);
                for (const schema of schemas) {
                    if (schema.type === "JsonSchema") {
                        const credentialSchema = yield resolver.resolve({
                            // prefer to resolve this one by id, instead of content
                            id: schema.id,
                            type: "application/schema+json",
                            purpose: "schema-validation",
                        });
                        if (credentialSchema === true) {
                            validation.schema[schema.id] = { validation: "ignored" };
                            continue;
                        }
                        const schemaContent = text_1.decoder.decode(credentialSchema.content);
                        const parsedSchemaContent = JSON.parse(schemaContent);
                        let valid;
                        let compiledSchemaValidator;
                        try {
                            const maybeExistingSchema = ajv_1.ajv.getSchema(parsedSchemaContent.$id);
                            compiledSchemaValidator = maybeExistingSchema;
                            if (compiledSchemaValidator === undefined) {
                                // only compile new schemas...
                                // this assumes schemas do not change.
                                compiledSchemaValidator = ajv_1.ajv.compile(parsedSchemaContent);
                            }
                            valid = compiledSchemaValidator(verified);
                        }
                        catch (e) {
                            valid = false;
                        }
                        validation.schema[schema.id] = { validation: valid ? "succeeded" : "failed" };
                        if (!valid) {
                            if (compiledSchemaValidator === undefined) {
                                validation.schema[schema.id].errors = [{ message: "json schema has invalid syntax" }];
                            }
                            else {
                                validation.schema[schema.id].errors = compiledSchemaValidator.errors;
                            }
                        }
                    }
                }
            }
            if (credentialStatus) {
                const statuses = (Array.isArray(credentialStatus) ? verified.credentialStatus : [credentialStatus]);
                for (const status of statuses) {
                    if (status.type === "BitstringStatusListEntry") {
                        const statusListCredential = yield resolver.resolve({
                            // prefer to resolve this one by id, instead of content
                            id: status.statusListCredential,
                            type: type,
                            purpose: "status-check",
                        });
                        const verified = yield (0, verifier_1.verifier)({ resolver }).verify(statusListCredential);
                        // confirm purpose matches
                        if (status.statusPurpose !== verified.credentialSubject.statusPurpose) {
                            validation.status[`${status.id}`] = {
                                [status.statusPurpose]: false,
                                errors: [
                                    {
                                        message: "status list purpose does not match credential status",
                                    },
                                ],
                            };
                        }
                        else {
                            const bit = (0, status_list_1.bs)(verified.credentialSubject.encodedList).get(parseInt(status.statusListIndex, 10));
                            validation.status[`${status.id}`] = { [status.statusPurpose]: bit };
                        }
                    }
                }
            }
            return (0, w3c_1.conformance)(validation);
        }),
    };
};
exports.validator = validator;
