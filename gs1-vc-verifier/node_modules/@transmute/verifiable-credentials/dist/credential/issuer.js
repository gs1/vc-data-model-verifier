"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.issuer = void 0;
const vc_jwt_sd_1 = __importDefault(require("@transmute/vc-jwt-sd"));
const claimset = __importStar(require("../claimset"));
const text_1 = require("../text");
const coseSign1CredentialIssuer = (issuer) => {
    return {
        issue: (credential) => __awaiter(void 0, void 0, void 0, function* () {
            if (issuer.signer === undefined) {
                throw new Error('No signer available.');
            }
            const claims = claimset.parse(text_1.decoder.decode(credential.claimset));
            return issuer.signer.sign(text_1.encoder.encode(JSON.stringify(claims)));
        })
    };
};
const jwtCredentialIssuer = (issuer) => {
    return {
        issue: (credential) => __awaiter(void 0, void 0, void 0, function* () {
            if (issuer.signer === undefined) {
                throw new Error('No signer available.');
            }
            const claims = claimset.parse(text_1.decoder.decode(credential.claimset));
            return issuer.signer.sign(text_1.encoder.encode(JSON.stringify(claims)));
        })
    };
};
const sdJwtCredentialIssuer = (issuer) => {
    return {
        issue: (credential) => __awaiter(void 0, void 0, void 0, function* () {
            if (issuer.signer === undefined) {
                throw new Error('No signer available.');
            }
            const sdJwsSalter = yield vc_jwt_sd_1.default.salter();
            const sdJwsDigester = yield vc_jwt_sd_1.default.digester();
            const sdIssuer = yield vc_jwt_sd_1.default.issuer({
                alg: issuer.alg,
                typ: 'application/vc-ld+sd-jwt',
                cty: 'application/vc-ld',
                salter: sdJwsSalter,
                digester: sdJwsDigester,
                signer: {
                    sign: ({ claimset }) => __awaiter(void 0, void 0, void 0, function* () {
                        const jws = yield issuer.signer.sign(text_1.encoder.encode(JSON.stringify(claimset)));
                        return text_1.decoder.decode(jws);
                    })
                }
            });
            const sdJwt = yield sdIssuer.issue({
                // holder: publicKeyJwk,
                claimset: text_1.decoder.decode(credential.claimset)
            });
            return text_1.encoder.encode(sdJwt);
        })
    };
};
const issuer = (issuer) => {
    if (issuer.type === 'application/vc-ld+jwt') {
        return jwtCredentialIssuer(issuer);
    }
    else if (issuer.type === 'application/vc-ld+sd-jwt') {
        return sdJwtCredentialIssuer(issuer);
    }
    else if (issuer.type === 'application/vc-ld+cose') {
        return coseSign1CredentialIssuer(issuer);
    }
    throw new Error('credential type is not supported.');
};
exports.issuer = issuer;
