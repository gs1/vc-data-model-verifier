"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.holder = void 0;
const vc_jwt_sd_1 = __importDefault(require("@transmute/vc-jwt-sd"));
const jose_1 = require("jose");
const text_1 = require("../text");
const presentationToClaims = (req) => {
    const claims = req.presentation;
    claims.verifiableCredential = [];
    for (const d of req.disclosures) {
        const text = d.type.endsWith("+cose")
            ? `base64url,${jose_1.base64url.encode(d.credential)}`
            : new TextDecoder().decode(d.credential);
        claims.verifiableCredential.push({
            "@context": "https://www.w3.org/ns/credentials/v2",
            id: `data:${d.type};${text}`,
            type: "EnvelopedVerifiableCredential",
        });
    }
    return claims;
};
const jwtPresentationIssuer = (holder) => {
    return {
        issue: (req) => __awaiter(void 0, void 0, void 0, function* () {
            if (req.signer === undefined) {
                throw new Error("No signer available.");
            }
            const claims = presentationToClaims(req);
            return req.signer.sign(text_1.encoder.encode(JSON.stringify(claims)));
        }),
    };
};
const coseSign1PresentationIssuer = (holder) => {
    return {
        issue: (req) => __awaiter(void 0, void 0, void 0, function* () {
            if (req.signer === undefined) {
                throw new Error("No signer available.");
            }
            const claims = presentationToClaims(req);
            return req.signer.sign(text_1.encoder.encode(JSON.stringify(claims)));
        }),
    };
};
const sdJwtPresentationIssuer = (holder) => {
    return {
        issue: (req) => __awaiter(void 0, void 0, void 0, function* () {
            if (!req.disclosures) {
                throw new Error("disclosures are required for this presentation type");
            }
            const sdJwsSigner = {
                sign: ({ claimset }) => __awaiter(void 0, void 0, void 0, function* () {
                    if (req.signer === undefined) {
                        throw new Error("signer is required for this presentation type");
                    }
                    const bytes = text_1.encoder.encode(JSON.stringify(claimset));
                    return text_1.decoder.decode(yield req.signer.sign(bytes));
                }),
            };
            const sdJwsSalter = yield vc_jwt_sd_1.default.salter();
            const sdJwsDigester = yield vc_jwt_sd_1.default.digester();
            const sdHolder = yield vc_jwt_sd_1.default.holder({
                alg: holder.alg,
                salter: sdJwsSalter,
                digester: sdJwsDigester,
                signer: sdJwsSigner,
            });
            // address undefined behavior for presentations of multiple dislosable credentials
            // with distinct disclosure choices...
            // https://w3c.github.io/vc-data-model/#example-basic-structure-of-a-presentation-0
            const vp = req.presentation;
            vp.verifiableCredential = [];
            for (const d of req.disclosures) {
                const sdJwtFnard = (yield sdHolder.issue({
                    token: text_1.decoder.decode(d.credential),
                    disclosure: text_1.decoder.decode(d.disclosure),
                    nonce: d.nonce,
                    audience: d.audience, // https://github.com/transmute-industries/vc-jwt-sd/issues/7
                }));
                vp.verifiableCredential.push({
                    "@context": "https://www.w3.org/ns/credentials/v2",
                    id: `data:application/vc-ld+sd-jwt;${sdJwtFnard}`,
                    type: "EnvelopedVerifiableCredential",
                });
            }
            const sdIssuer = yield vc_jwt_sd_1.default.issuer({
                alg: holder.alg,
                salter: sdJwsSalter,
                digester: sdJwsDigester,
                signer: sdJwsSigner,
            });
            const sdJwt = yield sdIssuer.issue({
                // its possible to bind this vp to a key for proof of posession
                // for now, we will assume thats not a feature.
                // holder: publicKeyJwk,
                // its possible to mark credentials disclosable here...
                // for now, we will assume thats not a feature.
                claimset: vc_jwt_sd_1.default.YAML.dumps(vp),
            });
            return text_1.encoder.encode(sdJwt);
        }),
    };
};
const unsecuredPresentationOfSecuredCredentials = (holder) => {
    return {
        issue: (req) => __awaiter(void 0, void 0, void 0, function* () {
            if (req.disclosures == undefined) {
                throw new Error("disclosures is REQUIRED for this presentation type.");
            }
            const sdJwsSalter = yield vc_jwt_sd_1.default.salter();
            const sdJwsDigester = yield vc_jwt_sd_1.default.digester();
            const sdHolder = yield vc_jwt_sd_1.default.holder({
                alg: holder.alg,
                salter: sdJwsSalter,
                digester: sdJwsDigester,
                // note that no signer is here, since no holder binding is present.
            });
            const vp = req.presentation;
            vp.verifiableCredential = [];
            for (const d of req.disclosures) {
                let enveloped = undefined;
                if (d.disclosure) {
                    const sdJwtFnard = (yield sdHolder.issue({
                        token: text_1.decoder.decode(d.credential),
                        disclosure: text_1.decoder.decode(d.disclosure),
                        // no audience or nonce are present here,
                        // since there can be no key binding
                    }));
                    enveloped = `data:${d.type};${sdJwtFnard}`; // great job everyone.
                }
                else {
                    const token = text_1.decoder.decode(d.credential);
                    enveloped = `data:${d.type};${token}`;
                }
                if (enveloped === undefined) {
                    throw new Error("Unable to envelop credential for presentation");
                }
                vp.verifiableCredential.push({
                    "@context": "https://www.w3.org/ns/credentials/v2",
                    id: enveloped,
                    type: "EnvelopedVerifiableCredential",
                });
            }
            return text_1.encoder.encode(JSON.stringify(vp));
        }),
    };
};
const holder = (holder) => {
    if (holder.type === "application/vp-ld+jwt") {
        return jwtPresentationIssuer(holder);
    }
    else if (holder.type === "application/vp-ld+sd-jwt") {
        return sdJwtPresentationIssuer(holder);
    }
    else if (holder.type === "application/vp-ld+cose") {
        return coseSign1PresentationIssuer(holder);
    }
    else if (holder.type === "application/vp-ld") {
        return unsecuredPresentationOfSecuredCredentials(holder);
    }
    throw new Error("presentation type is not supported.");
};
exports.holder = holder;
